"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var regions_1 = require("./regions");
var us = require('us');
var eu = require('./in-eu');
var inTimezone = require('./locales-timezones').inTimezone;
/**
 * Returns a timezone-based guess of whether or not a user is in the given regions.
 * @param regions An array of string representations of a region, i.e. ['EU', 'CA']
 */
function inRegions(regions) {
    validateRegions(regions);
    return function () { return regions.some(function (region) {
        if (region === 'EU') {
            return eu.inEU();
        }
        // if region is a US State, only check timezone, since all of US likely uses en-us
        if (Object.keys(regions_1.usStateCodes).includes(region)) {
            return inTimezone(region);
        }
    }); };
}
exports.default = inRegions;
function validateRegions(regions) {
    var invalidRegions = regions.filter(function (region) {
        return region !== 'EU' && !Object.keys(regions_1.usStateCodes).includes(region);
    });
    if (invalidRegions.length > 0) {
        throw new Error("The following regions are not currently supported: " + invalidRegions + ". We're working on it! \uD83D\uDEE0");
    }
}
